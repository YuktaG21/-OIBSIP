# -*- coding: utf-8 -*-
"""Car Price.ipynb

Automatically generated by Colaboratory.


# **Car Price Prediction**
"""

import numpy as np
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt

path='/content/drive/MyDrive/DATASETS/CarPrice.csv'

data_set = pd.read_csv(path)

data_set.head()

data_set.info()

data_set.sample

data_set.isnull().sum()

data_set.describe()

data_set.shape

data_set.sample(10)

data_set[data_set.duplicated()]

"""## ***DATA CLEANING***"""

data_set['Company Name'] = data_set['CarName'].apply(lambda x :x.split()[0])

data_set

data_set.head()

data_set['Company Name'].unique()

def replace(error,correct):
  data_set['Company Name'] = data_set['Company Name'].replace(to_replace = error, value = correct)

replace('maxda', 'mazda')
replace('porcshce', 'porsche')
replace('nisan', 'nissan')
replace('vw', 'volkswagen')
replace('toyouta', 'toyota')

data_set['Company Name'].unique()

data_set.drop('car_ID', axis = 1, inplace = True )

data_set.columns

data_set.sample(5)

"""### ***Data Visualization and EDA***"""

data_set.hist(color="red", figsize=(10,10))
plt.show()

plt.figure(figsize=(20,6))

plt.subplot(2,2,1)
plt1 = sns.countplot(x = 'Company Name', data = data_set)
plt.title('Companies Countplot')
ax = plt.gca()
ax.tick_params(axis = 'x', labelrotation = 45)
plt.subplot(2,2,2)
plt2 = sns.countplot(x = 'fueltype' , data = data_set)

plt.figure(figsize = (12,5))
plt.subplot(1,2,1)
data_set.groupby('Company Name').mean()['price'].sort_values().plot(kind = 'bar')

plt.subplot(1,2,2)
sns.boxplot(x='price' , data = data_set)

plt.figure(figsize = (20,8))

plt.subplot(2,2,1)
sns.countplot(x='symboling' , data = data_set)
plt.title('Symboling Couuntplot')

plt.subplot(2,2,3)
sns.countplot(x='aspiration' , data = data_set)
ax = plt.gca()
ax.tick_params(axis = 'x' , labelrotation = 45)

plt.subplot(2,2,2)
plt1 = sns.boxplot(x='symboling' , y='price' , data = data_set)

plt.subplot(2,2,4)
plt2 = sns.boxplot(x='aspiration' , y='price' , data = data_set)
ax = plt.gca()
ax.tick_params(axis = 'x' , labelrotation = 45)

plt.figure(figsize=(20,8))
sns.boxplot(x = 'Company Name', y = 'price', data=data_set)

data_set['price'].describe()

plt.figure(figsize=(12,12))

plt.subplot(4,2,1)
sns.countplot(x='drivewheel' , data = data_set)
plt.subplot(4,2,2)
sns.boxplot(x='drivewheel' , y='price' , data = data_set)


plt.subplot(4,2,3)
sns.countplot(x='enginetype' , data = data_set)
plt.subplot(4,2,4)
sns.boxplot(x='enginetype' , y='price' , data = data_set)


plt.subplot(4,2,5)
sns.countplot(x='fuelsystem' , data = data_set)
plt.subplot(4,2,6)
plt1 = sns.boxplot(x='fuelsystem' , y='price' , data = data_set)

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.countplot(x='enginelocation' , data = data_set)
plt.subplot(1,2,2)
plt1 = sns.boxplot(x='enginelocation' , y='price' , data = data_set)

data_set.corr()['price'].index

data_set.corr()['price']

sns.pairplot(x_vars = ['boreratio', 'stroke', 'compressionratio', 'citympg'], y_vars= ['price'], data = data_set)

plt.figure(figsize=(10,8))
sns.heatmap(data_set.corr(), annot = True)

plt.figure(figsize=(5,5))
sns.distplot(data_set['price'], hist=True)

plt.figure(figsize=(20,20))
ax = sns.countplot(x=data_set["CarName"]);
ax.bar_label(ax.containers[0]);
plt.xticks(rotation = 'vertical');

predict = "price"
data_set = data_set[['symboling', 'wheelbase', 'carwidth', 'carheight', 'curbweight', 'enginesize', 'boreratio', 'stroke','compressionratio','horsepower', 'peakrpm','citympg', 'highwaympg', 'price']]

x = np.array(data_set.drop([predict],1))

y = np.array(data_set[predict])

print(x)

print(y)

"""### ***Model Training***"""

from sklearn.ensemble import RandomForestRegressor

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test, = train_test_split(x, y, test_size=0.2, random_state=50) 
print('training data shape is:{}.' .format(x_train.shape))

print('training label shape is:{}.' .format(y_train.shape))

print('testing data shape is:{}.' .format(x_test.shape))

print('testing data shape is:{}.' .format(y_test.shape))

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor()

regressor.fit(x,y)

regressor.score(x_train, y_train)

regressor.score(x_test, y_test)

from sklearn.metrics import accuracy_score
predictions = regressor.predict(x_test)

percent = regressor.score(x_test, y_test)
percent

print(regressor.score(x_train, y_train))
print(f"test set:{len(x_test)}")
print(f"Accuracy:{percent*100}%")

from sklearn.svm import SVR
svm = SVR()
svm.fit(x_train, y_train)
svm.score(x_test, y_test)

y_pred = svm.predict(x_test)

fig = plt.figure()
sns.displot((y_test - y_pred), bins= 30, kde= True)
fig.suptitle('Error Terms')
plt.xlabel('Errors')

fig=plt.figure()
plt.scatter(y_test, y_pred)
fig.suptitle('y_test vs y_pred', fontsize = 18)
plt.xlabel('y_test')
plt.ylabel('y_pred')

